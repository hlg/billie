space:
  part: IfcObject > Polyeder
    condition:
      data.obj type IfcBuildingElement
    initial:
      graph.vert = data.geometry.vert
      graph.norm = data.geometry.norm
      graph.ind = data.geometry.ind
      graph.color = rgba(128 ,128,128 ,150)
      graph.click = HIGHLIGHT
    update(HIGHLIGHT):
      graph.color = rgba(200,0,0,0)
    update(UNHIGHLIGHT):
      graph.color = rgba(128 ,128,128 ,150)
  part: ResolvedLink > Bezier
    tree = { n ->
      y: (n.before + n.size /2) * SCALE
      x: n.depth * DIST + OFFSET
    }
    BS = 1-BUNDLING
    params = { t ->
      ax: BS*(t.first.x-t.last.x)/t.size ,
      ay: BS*(t.last.y-t.first.y)/t.size ,
      cx: BS*t.first.x,
      cy: BS*t.first.y
    }
    bundling = { node ->
      x: BUNDLING*node.x + cx + i*ax
      y: BUNDLING*node.y + cy + i*ay
    }
    tr = data.hierIfc.anc.map(tree)
    graph.points = tr.map(bundling , params(tr))
    tr = data.hierGaeb.anc.inv.map(tree)
    graph.points = tr.apply(bundling , params(tr))
    graph.color = rgba (50 ,50 ,50 ,0)
  part:
    rule: GaebTgItem > Rectangle
      initial:
        graph.height = 15
        graph.left = 400
        graph.top = index*20
        graph.width = data.IT
        graph.click = HIGHLIGHT
    rule: GaebTgItem > Label
      initial:
        graph.text = data.outlineText
        graph.left = 0
        graph.top = index*20


